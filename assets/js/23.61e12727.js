(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{614:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"第七章-查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七章-查找"}},[s._v("#")]),s._v(" 第七章 查找")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("第八章 ： 排序 >待会做 "),a("code",[s._v("别忘记实现代码")])]),s._v(" "),a("h4",{attrs:{id:"_1-查找的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-查找的基本概念"}},[s._v("#")]),s._v(" 1.查找的基本概念")]),s._v(" "),a("p",[a("strong",[s._v("查找表")]),s._v("是由同一类型的数据元素（或记录）构成的集合。由于“集合”中的数据元素之间存在着"),a("strong",[s._v("松散的关系")]),s._v("，因此查找表是一种应用灵便的结构。")]),s._v(" "),a("p",[a("strong",[s._v("查找")]),s._v("：根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素或（记录）")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("关键字")]),s._v("：用来标识一个数据元素（或记录）的某个数据项的值\n"),a("ul",[a("li",[a("strong",[s._v("主关键字")]),s._v("：可唯一地标识一个记录的关键字是主关键字；")]),s._v(" "),a("li",[a("strong",[s._v("次关键字")]),s._v("：反之，用以识别若干记录的关键字是次关键字。")])])])]),s._v(" "),a("ol",[a("li",[s._v("查找的目的：\n"),a("ul",[a("li",[s._v('查询某个“特定的"数据元素是否在查找表中；')]),s._v(" "),a("li",[s._v("检索某个“特定的“数据元素的各种属性；")]),s._v(" "),a("li",[s._v("在查找表中插入一个数据元素；")]),s._v(" "),a("li",[s._v("删除查找表中的某个数据元素。")])])]),s._v(" "),a("li",[s._v("查找的分类\n"),a("ul",[a("li",[a("strong",[s._v("静态查找表")]),s._v("：仅作“查询”（检索）操作的查找表")]),s._v(" "),a("li",[a("strong",[s._v("动态查找表")]),s._v("：作“插入”和“删除”操作的查找表")])])]),s._v(" "),a("li",[s._v("如何评价查找算法\n"),a("ul",[a("li",[s._v("查找算法的评价指标“：关键字的平均比较次数，也称为"),a("strong",[s._v("平均查找长度")]),s._v("，（ASL, Average Search Length）。")])])])]),s._v(" "),a("h4",{attrs:{id:"_2-线性表的查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-线性表的查找"}},[s._v("#")]),s._v(" 2.线性表的查找")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    InfoType otherinfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//KeyType 和 InfoType 均是定义类型，如：int")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("SSTable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("以下代码都是从以上定义而出发的。")]),s._v(" "),a("h5",{attrs:{id:"_1-顺序查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-顺序查找"}},[s._v("#")]),s._v(" (1)顺序查找")]),s._v(" "),a("p",[s._v("其实就是普通的暴力for。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Search_Seq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SSTable ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这个算法还能改进，使它时间复杂度几乎缩短到原来的一半。")]),s._v(" "),a("p",[s._v("加个哨兵。即"),a("code",[s._v("ST.R[0] = key")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Search_Seq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SSTable ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("时间复杂度： O(n)")]),s._v(" "),a("p",[s._v("空间复杂度： O(1)")]),s._v(" "),a("p",[s._v("平均时间查找长度为：ASL：(1+2+3+···+n)/n = (n+1)/2")]),s._v(" "),a("h5",{attrs:{id:"_2-二分查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-二分查找"}},[s._v("#")]),s._v(" (2)二分查找")]),s._v(" "),a("p",[s._v("又叫折半查找。")]),s._v(" "),a("p",[s._v("直接上代码：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Search_Bin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SSTable ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("high "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("R"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" low "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" high "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("时间复杂度： O(logn)")]),s._v(" "),a("p",[s._v("二分查找的时间复杂度可以通过画判定树来计算。")]),s._v(" "),a("p",[s._v("每一个中点为树的结点，遵循 "),a("code",[s._v("左结点 < 根 < 右结点")]),s._v("。有一个结点就说明比较一次.")]),s._v(" "),a("h5",{attrs:{id:"_3-分块查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-分块查找"}},[s._v("#")]),s._v(" (3)分块查找")]),s._v(" "),a("p",[s._v("将数组分成好几块，每一块的最大数大于前面一块的最大数。后一块的所有点大于前一块的最大点。")]),s._v(" "),a("p",[s._v("以块的最大值为索引。")]),s._v(" "),a("p",[s._v("查找： 先确定待查找记录所在，顺序查找或者二分查找所在分块，再对分块内部顺序查找。内部如果是已经排序好的，可以进行二分查找。")]),s._v(" "),a("p",[s._v("查找效率为：ASL = lb + lw = log2(n/s"),a("code",[s._v("(块数)")]),s._v(" + 1) + s/2.")]),s._v(" "),a("blockquote",[a("p",[s._v("优点：插入和删除较容易，无需进行大量移动")]),s._v(" "),a("p",[s._v("缺点：要增加一个索引表的存储空间并对初始索引表进行排序运算")]),s._v(" "),a("p",[s._v("适用情况：如果线性表既要"),a("strong",[s._v("快速查找")]),s._v("又经常"),a("strong",[s._v("动态变化")]),s._v("，则可采用分块查找。")])]),s._v(" "),a("h4",{attrs:{id:"_3-树表的查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-树表的查找"}},[s._v("#")]),s._v(" 3.树表的查找")]),s._v(" "),a("h5",{attrs:{id:"_1-二叉排序树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-二叉排序树"}},[s._v("#")]),s._v(" (1) 二叉排序树")]),s._v(" "),a("p",[a("strong",[s._v("二叉排序树")]),s._v("（Binary Sort Tree）又称为二叉搜索树、二叉查找树。")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("二叉排序树定义：")]),s._v(" "),a("p",[s._v("二叉排序树或是空树，或是满足如下性质的二叉树：")]),s._v(" "),a("ol",[a("li",[s._v("若其左子树非空，则左子树上所有结点的值均小于根结点的值；")]),s._v(" "),a("li",[s._v("若其右子树非空，则右子树上所有结点的值均大于等于根结点的值；")]),s._v(" "),a("li",[s._v("其左右子树本身又各是一棵二叉排序树")])])]),s._v(" "),a("li",[a("p",[s._v("二叉排序树的性质：")]),s._v(" "),a("p",[s._v("中序遍历非空的二叉排序树所得到的数据元素序列是一个按关键字排列的"),a("strong",[s._v("递增有序")]),s._v("序列。")])]),s._v(" "),a("li",[a("p",[s._v("二叉排序树的操作——查找")]),s._v(" "),a("ul",[a("li",[s._v("若查找的关键字等于根节点，成功。")]),s._v(" "),a("li",[s._v("否则：\n"),a("ul",[a("li",[s._v("若小于根节点，查其左子树")]),s._v(" "),a("li",[s._v("若大于根节点，查找右子树")])])]),s._v(" "),a("li",[s._v("在左右子树上的操作类似")])])])]),s._v(" "),a("p",[s._v("以下是二叉树：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    InfoType otherinfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("ElemType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BSTNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ElemType data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BSTNode")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("BSTNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("BSTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("其实，整个二叉排序树都是围绕着"),a("code",[s._v("左子树< 根节点 < 右子树")]),s._v("结构的。")]),s._v(" "),a("p",[s._v("下面是二叉排序树的查找：")]),s._v(" "),a("h5",{attrs:{id:"_1-二叉排序树的查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-二叉排序树的查找"}},[s._v("#")]),s._v(" (1)二叉排序树的查找")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("BSTree "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SearchBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("BSTree T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("KeyType key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" Key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SearchBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("BSTree T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SearchBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("BSTree T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("对于含有n个结点的二叉排序树的平均查找长度和树的形状有关。")]),s._v(" "),a("p",[s._v("ASL = 深度*几个结点数相加/n。")]),s._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[s._v("最好情况：与折半查找中的判定树相同，O(log2n)；")])]),s._v(" "),a("li",[a("p",[s._v("最坏情况：退化为单支树（类似于线性列表），树深度为n，ASL = (n+1)/2，O(n)；")])])])]),s._v(" "),a("h5",{attrs:{id:"_2-二叉排序树的插入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-二叉排序树的插入"}},[s._v("#")]),s._v(" (2)二叉排序树的插入")]),s._v(" "),a("ul",[a("li",[s._v("若二叉排序树为空，则插入结点作为根结点插入到空树中")]),s._v(" "),a("li",[s._v("否则，继续在其左、右子树上查找\n"),a("ul",[a("li",[s._v("树中已有，不再插入")]),s._v(" "),a("li",[s._v("树中没有\n"),a("ul",[a("li",[s._v("查找直至某个叶子结点的左子树或右子树为空为止，则插入结点应为该叶子结点的左孩子或右孩子")])])])])])]),s._v(" "),a("p",[a("strong",[s._v("插入的元素一定是叶子节点")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("InsertBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("BSTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("T，ELemType e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        S "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" BSTNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        S "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        S "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" lchild "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" rchild "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" S"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("InsertBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" lchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" ddata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("InsertBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" rchild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h5",{attrs:{id:"_3-二叉排序树的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-二叉排序树的创建"}},[s._v("#")]),s._v(" (3)二叉排序树的创建")]),s._v(" "),a("p",[s._v("一个无序序列可通过构造二叉排序树而变成一个有序序列。构造树的过程就是对无序序列进行排序的过程。")]),s._v(" "),a("p",[s._v("插入的结点均为叶子结点，故无需移动其他结点。相当于在有序序列上插入记录而无需移动其他记录。但是，"),a("strong",[s._v("关键字的输入顺序不同，建立的二叉排序树也不同")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("CreatBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("BSTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    T "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    cin "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" ENDFLAG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这玩意是判断输入结束的")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("InsertBST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        cin "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h5",{attrs:{id:"_5-二叉排序树的删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-二叉排序树的删除"}},[s._v("#")]),s._v(" (5)二叉排序树的删除")]),s._v(" "),a("p",[s._v("删除时，"),a("strong",[s._v("还应保证删除后所得的二叉树仍然满足二叉排序树的性质不变")]),s._v("。")]),s._v(" "),a("blockquote",[a("p",[s._v("1.如果删除的结点是叶子结点：直接删除该结点。")]),s._v(" "),a("p",[s._v("2.被删除的结点只有左子树或者只有右子树，用其左子树或者右子树替换它（结点替换）。")]),s._v(" "),a("p",[s._v("3.本删除的结点既有左子树，也有右子树：可以用其中序的前驱结点替换，然后删除该前驱结点（前驱结点是左子树中最大的结点）；也可以用中序的后继结点，然后删除该后继结点（后继是右子树中最小的结点）。")])]),s._v(" "),a("h4",{attrs:{id:"_4-散列表的查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-散列表的查找"}},[s._v("#")]),s._v(" 4.散列表的查找")]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")])])}),[],!1,null,null,null);t.default=e.exports}}]);